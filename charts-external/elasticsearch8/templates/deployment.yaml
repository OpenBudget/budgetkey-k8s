{{ if .Values.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch8
spec:
  selector:
    matchLabels:
      app: elasticsearch8
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: elasticsearch8
    spec:
      containers:
      - name: es_setup
        image: "docker.elastic.co/elasticsearch/elasticsearch:{{ .Values.stackVersion | default "8.17.0" | quote }}"
        user: 0
        env:
        - name: ELASTIC_PASSWORD
          valueFrom: {secretKeyRef: {name: {{ .Values.secretName | quote }}, key: ELASTIC_PASSWORD}}
        - name: KIBANA_PASSWORD
          valueFrom: {secretKeyRef: {name: {{ .Values.secretName | quote }}, key: KIBANA_PASSWORD}}
        volumeMounts:
        - name: certs
          mountPath: /usr/share/elasticsearch/config/certs
        command: >
          bash -c '
            if [ -z "${ELASTIC_PASSWORD}" ]; then
              echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
              exit 1;
            elif [ -z "${KIBANA_PASSWORD}" ]; then
              echo "Set the KIBANA_PASSWORD environment variable in the .env file";
              exit 1;
            fi;
            if [ ! -f config/certs/ca.zip ]; then
              echo "Creating CA";
              bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
              unzip config/certs/ca.zip -d config/certs;
            fi;
            if [ ! -f config/certs/certs.zip ]; then
              echo "Creating certs";
              echo -ne \
                "instances:\n"\
                "  - name: es01\n"\
                "    dns:\n"\
                "      - es01\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                > config/certs/instances.yml;
              bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
              unzip config/certs/certs.zip -d config/certs;
            fi;
            echo "Setting file permissions";
            chown -R root:root config/certs;
            find . -type d -exec chmod 750 {} \;;
            find . -type f -exec chmod 640 {} \;;
            echo "Waiting for Elasticsearch availability";
            until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
            echo "Setting kibana_system password";
            until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
            echo "All done!";
          '
      - name: es01
        image: "docker.elastic.co/elasticsearch/elasticsearch:{{ .Values.stackVersion | default "8.17.0" | quote }}"
        ports:
        - containerPort: 9200
        - containerPort: 9300
        resources: {{ .Values.resources }}
        env:
        - name: ES_JAVA_OPTS
          value: {{ .Values.ES_JAVA_OPTS | quote }}
        - name: node.name
          value: es01
        - name: cluster.name
          value: budgetkey-es-cluster
        - name: discovery.type
          value: single-node
        - name: bootstrap.memory_lock
          value: "true"
        - name: ELASTIC_PASSWORD
          valueFrom: {secretKeyRef: {name: {{ .Values.secretName | quote }}, key: ELASTIC_PASSWORD}}
        - name: xpack.security.enabled
          value: "false"
        - name: xpack.security.http.ssl.enabled
          value: "true"
        - name: xpack.security.http.ssl.key
          value: config/certs/es01/es01.key
        - name: xpack.security.http.ssl.certificate
          value: config/certs/es01/es01.crt
        - name: xpack.security.http.ssl.certificate_authorities
          value: config/certs/ca/ca.crt
        - name: xpack.security.transport.ssl.enabled
          value: "true"
        - name: xpack.security.transport.ssl.key
          value: config/certs/es01/es01.key
        - name: xpack.security.transport.ssl.certificate
          value: config/certs/es01/es01.crt
        - name: xpack.security.transport.ssl.certificate_authorities
          value: config/certs/ca/ca.crt
        - name: xpack.security.transport.ssl.verification_mode
          value: certificate
        - name: xpack.license.self_generated.type
          value: basic
        volumeMounts:
        - name: certs
          mountPath: /usr/share/elasticsearch/config/certs
        - name: esdata
          mountPath: /usr/share/elasticsearch/data
      volumes:
      - name: esdata
        nfs:
          server: {{ .Values.nfsServer | quote }}
          path: {{ .Values.nfsPathEsData | quote }}
      - name: certs
        nfs:
          server: {{ .Values.nfsServer | quote }}
          path: {{ .Values.nfsPathEsCerts | quote }}
{{ end }}
