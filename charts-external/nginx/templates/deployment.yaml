{{ if .Values.enabled }}
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  {{ if .Values.enableAntiAffinity }}
  affinity:
    # ensure nginx won't be on the same node as elasticsearch or postgres
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - elasticsearch
            - postgres
        topologyKey: "kubernetes.io/hostname"
  {{ end }}
  template:
    metadata:
      labels:
        app: nginx
    spec:
      {{ if .Values.global.persistentDataVolume.hostname }}
      nodeSelector:
        kubernetes.io/hostname: {{ .Values.global.persistentDataVolume.hostname | quote }}
      {{ end }}
      containers:
      - name: nginx
        image: {{ .Values.image | default "budgetkey/open-budget-nginx-frontend:latest" | quote }}
        ports:
        - containerPort: 80
        - containerPort: 5601
        resources: {{ .Values.resources }}
        {{ if .Values.overrideStartupScript }}
        command:
        - sh
        - "-c"
        - |
          {{ .Values.overrideStartupScript }}
        {{ end }}
        volumeMounts:
        - mountPath: /var/datapackages
          name: datapackages
        - mountPath: /var/_fonts
          name: fonts
      volumes:
      - name: datapackages
        {{ .Values.global.persistentDataVolume.type }}: {
          {{ if eq .Values.global.persistentDataVolume.type "hostPath" }}
            "path": "{{ .Values.global.persistentDataVolume.basePath }}/datapackages",
            "type": "DirectoryOrCreate"
          {{ end }}
        }
      - name: fonts
        {{ .Values.global.persistentDataVolume.type }}: {
          {{ if eq .Values.global.persistentDataVolume.type "hostPath" }}
            "path": "{{ .Values.global.persistentDataVolume.basePath }}/fonts",
            "type": "DirectoryOrCreate"
          {{ end }}
        }
{{ end }}
